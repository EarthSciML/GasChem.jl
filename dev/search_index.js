var documenterSearchIndex = {"docs":
[{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"CurrentModule = GasChem","category":"page"},{"location":"composing_models/#Composing-models","page":"Composing models","title":"Composing models","text":"","category":"section"},{"location":"composing_models/#Illustrative-Example","page":"Composing models","title":"Illustrative Example","text":"","category":"section"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"Here is the complete example of composing, visualizing and solving the SuperFast model and the Fast-JX model, with explanation to follow:","category":"page"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"using EarthSciMLBase, GasChem, ModelingToolkit, OrdinaryDiffEq, Dates, Unitful, DifferentialEquations\n\n\n@parameters t\ncomposed_ode = SuperFast(t) + FastJX(t) # Compose two models simply use the \"+\" operator\n\nstart = Dates.datetime2unix(Dates.DateTime(2024, 2, 29))\ntspan = (start, start+3600*24*3)\nsys = structural_simplify(get_mtk(composed_ode)) # Define the coupled system  \nsol = solve(ODEProblem(sys, [], tspan, []),AutoTsit5(Rosenbrock23()), saveat=10.0) # Solve the coupled system","category":"page"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"In the composed system, the variable name for O₃ is not O3 but superfast₊O3(t). So we need some preparation of the result before visualizing. ","category":"page"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"vars = states(sys)  # Get the variables in the composed system\nvar_dict = Dict(string(var) => var for var in vars)\npols = [\"O3\", \"OH\", \"NO\", \"NO2\", \"CH4\", \"CH3O2\", \"CO\",\"CH3OOH\", \"CH3O\", \"DMS\", \"SO2\", \"ISOP\"]\nvar_names_p = [\"superfast₊$(v)(t)\" for v in pols]\n\nx_t = unix2datetime.(sol[t]) # Convert from unixtime to date time for visualizing ","category":"page"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"Then, we could plot the results as:","category":"page"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"using EarthSciMLBase, GasChem, ModelingToolkit, OrdinaryDiffEq, Dates, Unitful, DifferentialEquations\n\n\n@parameters t\ncomposed_ode = SuperFast(t) + FastJX(t) # Compose two models simply use the \"+\" operator\n\nstart = Dates.datetime2unix(Dates.DateTime(2024, 2, 29))\ntspan = (start, start+3600*24*3)\nsys = structural_simplify(get_mtk(composed_ode)) # Define the coupled system  \nsol = solve(ODEProblem(sys, [], tspan, []),AutoTsit5(Rosenbrock23()), saveat=10.0) # Solve the coupled system\n\nvars = states(sys)  # Get the variables in the composed system\nvar_dict = Dict(string(var) => var for var in vars)\npols = [\"O3\", \"OH\", \"NO\", \"NO2\", \"CH4\", \"CH3O2\", \"CO\",\"CH3OOH\", \"CH3O\", \"DMS\", \"SO2\", \"ISOP\"]\nvar_names_p = [\"superfast₊$(v)(t)\" for v in pols]\n\nx_t = unix2datetime.(sol[t]) # Convert from unixtime to date time for visualizing ","category":"page"},{"location":"composing_models/","page":"Composing models","title":"Composing models","text":"using Plots\npp = []\nfor (i, v) in enumerate(var_names_p)\n    name = pols[i]\n    push!(pp, Plots.plot(x_t,sol[var_dict[v]],label = \"$name\", size = (1000, 600), xrotation=45))\nend\nPlots.plot(pp..., layout=(3, 4))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GasChem]","category":"page"},{"location":"#GasChem.FastJX","page":"Home","title":"GasChem.FastJX","text":"Description: This is a box model used to calculate the photolysis reaction rate constant using the Fast-JX scheme  (Neu, J. L., Prather, M. J., and Penner, J. E. (2007), Global atmospheric chemistry: Integrating over fractional cloud cover, J. Geophys. Res., 112, D11306, doi:10.1029/2006JD008007.)\n\nBuild Fast-JX model\n\nExample\n\n    @parameters t\n    fj = FastJX(t)\n\n\n\n\n\n","category":"type"},{"location":"#GasChem.SuperFast","page":"Home","title":"GasChem.SuperFast","text":"SuperFast(t)\n\nThis atmospheric chemical system model is built based on the Super Fast Chemical Mechanism, which is one of the simplest representations of atmospheric chemistry. It can efficiently simulate background tropheric ozone chemistry and perform well for those species included in the mechanism. The chemical equations we used is included in the supporting table S2 of the paper:\n\n\"Evaluating simplified chemical mechanisms within present-day simulations of the Community Earth System Model version 1.2 with CAM4 (CESM1.2 CAM-chem): MOZART-4 vs. Reduced Hydrocarbon vs. Super-Fast chemistry\" (2018), Benjamin Brown-Steiner, Noelle E. Selin, Ronald G. Prinn, Simone Tilmes, Louisa Emmons, Jean-François Lamarque, and Philip Cameron-Smith.\n\nThe input of the function is Temperature, concentrations of all chemicals, and reaction rates of photolysis reactions \n\nExample\n\nusing GasChem, EarthSciMLBase, OrdinaryDiffEq, Plots\n@variables t [unit = u\"s\"]\nrs = SuperFast(t)\nsol = solve(ODEProblem(get_mtk(rs), [], (0,360), [], combinatoric_ratelaws=false), Tsit5())\nplot(sol)\n\nWe set combinatoric_ratelaws=false because we are modeling macroscopic rather than microscopic behavior.  See here  and here.\n\n\n\n\n\n","category":"type"},{"location":"#Base.:+-Tuple{SuperFast, FastJX}","page":"Home","title":"Base.:+","text":"Compose superfast and fast-jx models together.\n\nExample\n\nusing GasChem, EarthSciMLBase\n\n@parameters t \nsf = SuperFast(t) + FastJX(t)\ntspan = (0.0, 3600*24*2)\nsol = solve(ODEProblem(structural_simplify(get_mtk(sf)), [], tspan, []),Tsit5(), saveat=10.0)\nusing Plots\nplot(sol,ylims=(0,20),xlabel=\"Time (second)\", ylabel=\"concentration (ppb)\",legend=:outertopright)\n\n\n\n\n\n","category":"method"},{"location":"#GasChem.calc_flux-Union{Tuple{T}, Tuple{T, T}} where T","page":"Home","title":"GasChem.calc_flux","text":"calculate actinic flux at the given cosine of the solar zenith angle csa maximium actinic flux max_actinic_flux\n\n\n\n\n\n","category":"method"},{"location":"#GasChem.cos_solar_zenith_angle-Union{Tuple{T2}, Tuple{T}, Tuple{T, T2, T}} where {T, T2}","page":"Home","title":"GasChem.cos_solar_zenith_angle","text":"cos_solar_zenith_angle(lat, t, long)\n\nThis function is to compute the cosine of the solar zenith angle, given the unixtime, latitude and longitude The input variables: lat=latitude(°), long=longitude(°), t=unixtime(s)     the cosine of the solar zenith angle (SZA) is given by:                                                                            .            cos(SZA) = sin(LAT)sin(DEC) + cos(LAT)cos(DEC)*cos(AHR)\n\n       where LAT = the latitude angle,\n             DEC = the solar declination angle,\n             AHR = the hour angle, all in radians.  All in radians\n\n\n\n\n\n","category":"method"},{"location":"#GasChem.create_fjx_interp-Tuple{Vector{Float32}, Vector{StaticArraysCore.SVector{18, Float32}}}","page":"Home","title":"GasChem.create_fjx_interp","text":"Create a vector of interpolators to interpolate the cross sections σ (TODO: What are the units?) for different wavelengths (in nm) and temperatures (in K).\n\nWe use use linear interpolation with flat extrapolation.\n\n\n\n\n\n","category":"method"},{"location":"#GasChem.j_mean-Union{Tuple{T2}, Tuple{T}, Tuple{Any, Float32, T2, T, T, T}} where {T, T2}","page":"Home","title":"GasChem.j_mean","text":"Get mean photolysis rates at different times\n\n\n\n\n\n","category":"method"},{"location":"#GasChem.remove_D!-Tuple{Any}","page":"Home","title":"GasChem.remove_D!","text":"Converting the ReactionSystem to an ODESystem adds extra terms for the derivatives of the photolysis rate constants. We need to remove these terms before adding the fast-jx equations.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GasChem","category":"page"},{"location":"#GasChem:-Gas-Phase-Atmospheric-Chemical-Mechanisms","page":"Home","title":"GasChem: Gas-Phase Atmospheric Chemical Mechanisms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This atmospheric chemical system model GasChem is built based on the Super Fast Chemical Mechanism, which is one of the simplest representations of atmospheric chemistry. It can efficiently simulate background tropheric ozone chemistry and perform well for those species included in the mechanism. The chemical equations used is included in the supporting table S2 of the paper, \"Evaluating simplified chemical mechanisms within present-day simulations of the Community Earth System Model version 1.2 with CAM4 (CESM1.2 CAM-chem): MOZART-4 vs. Reduced Hydrocarbon vs. Super-Fast chemistry\" (2018), Benjamin Brown-Steiner, Noelle E. Selin, Ronald G. Prinn, Simone Tilmes, Louisa Emmons, Jean-François Lamarque, and Philip Cameron-Smith.","category":"page"},{"location":"#Illustrative-Example","page":"Home","title":"Illustrative Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a simple example of generating and solving the superfast model. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GasChem, EarthSciMLBase, ModelingToolkit, Unitful, DifferentialEquations\n\n@parameters t [unit = u\"s\", description = \"Time\"]\nmodel = SuperFast(t)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before running any simulations with the model, we need to convert it into a system of differential equations. We can solve it using the default values for variables and parameters. However, by using the @unpack command, we can assign new values to specific variables and parameters, allowing for simulations under varied conditions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"sys = structural_simplify(get_mtk(model))\n@unpack O3, T = sys\ntspan = (0.0, 3600*24)\nu0 = [O3 => 15] # Change the initial concentration of O₃ to 15 ppb\np0 = [T => 293] # temperature = 293K\nprob = ODEProblem(sys, u0, tspan, p0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reaction equations in the system are:  (Image: Chemical Network Graph)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can visualize the mathematical relationships within the system as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GasChem, EarthSciMLBase, ModelingToolkit, Unitful, DifferentialEquations\n\n@parameters t [unit = u\"s\", description = \"Time\"]\nmodel = SuperFast(t)\n\nsys = structural_simplify(get_mtk(model))\n@unpack O3, T = sys\ntspan = (0.0, 3600*24)\nu0 = [O3 => 15] # Change the initial concentration of O₃ to 15 ppb\np0 = [T => 293] # temperature = 293K\nprob = ODEProblem(sys, u0, tspan, p0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Latexify\nlatexify(equations(sys))","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can finally solve the system and plot the result as","category":"page"},{"location":"","page":"Home","title":"Home","text":"sol = solve(prob,AutoTsit5(Rosenbrock23()), saveat=10.0)\n\nusing Plots\nplot(sol, ylim = (0,50), xlabel = \"Time\", ylabel = \"Concentration (ppb)\", legend=:outerright)","category":"page"},{"location":"#Variables-and-parameters","page":"Home","title":"Variables and parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The species included in the superfast model are: O₃, OH, HO₂, O₂, NO, NO₂, CH₄, CH₃O₂, H₂O, CH₂O, CO, CH₃OOH, CH₃O, DMS, SO₂, ISOP, O₁d, H₂O₂.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The parameters in the model that are not constant are the photolysis reaction rates jO31D, j2OH, jH2O2, jNO2, jCH2Oa, jCH3OOH and temperature T","category":"page"},{"location":"","page":"Home","title":"Home","text":"states(sys) # Give you the variables in the system\nparameters(sys) # Give you the parameters in the system","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's run some simulation with different values for parameter T.","category":"page"},{"location":"","page":"Home","title":"Home","text":"p1 = [T => 273]\np2 = [T => 298]\nsol1 = solve(ODEProblem(sys, [], tspan, p1),AutoTsit5(Rosenbrock23()), saveat=10.0)\nsol2 = solve(ODEProblem(sys, [], tspan, p2),AutoTsit5(Rosenbrock23()), saveat=10.0)\n\nplot([sol1[O3],sol2[O3]], label = [\"T=273K\" \"T=298K\"], title = \"Change of O3 concentration at different temperatures\", xlabel=\"Time (second)\", ylabel=\"concentration (ppb)\")","category":"page"}]
}
